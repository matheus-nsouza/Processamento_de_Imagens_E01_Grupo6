"""
Sistema de Processamento e An√°lise de Imagens
Vers√£o Streamlit v2.0

Instala√ß√£o:
pip install streamlit opencv-python pillow numpy matplotlib scikit-image scikit-learn reportlab graphviz

Execu√ß√£o:
streamlit run sistema_processamento_imagens_v2.py

Autor: Sistema de Processamento de Imagens
Data: 2025
Vers√£o: 2.0
"""

import streamlit as st
import numpy as np
import cv2
from PIL import Image
import matplotlib.pyplot as plt
from skimage import filters, exposure, metrics
from skimage.filters import gaussian, median
from scipy import ndimage
import io
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
import tempfile
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Processamento de Imagens v2.0",
    page_icon="üñºÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo CSS customizado
st.markdown("""
    <style>
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .stButton>button {
        width: 100%;
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
        border-radius: 10px;
        padding: 10px;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }
    .metric-card {
        background-color: rgba(255, 255, 255, 0.1);
        padding: 20px;
        border-radius: 10px;
        border: 2px solid rgba(255, 255, 255, 0.2);
    }
    </style>
""", unsafe_allow_html=True)

# ============================================================================
# CLASSE PRINCIPAL DO SISTEMA
# ============================================================================

class ImageProcessingSystem:
    """Sistema completo de processamento e an√°lise de imagens"""
    
    # Constantes e limiares
    MAX_FILE_SIZE_MB = 10
    PSNR_THRESHOLD = 30.0
    SSIM_THRESHOLD = 0.85
    LC_MIN_THRESHOLD = 0.12
    EDGE_MIN_THRESHOLD = 0.03
    EDGE_MAX_THRESHOLD = 0.25
    
    def __init__(self):
        if 'initialized' not in st.session_state:
            st.session_state.original_image = None
            st.session_state.processed_image = None
            st.session_state.normalized_image = None
            st.session_state.preview_image = None
            st.session_state.versions = {}  # Para compara√ß√£o global vs local
            st.session_state.history = []
            st.session_state.metrics = {}
            st.session_state.user = "Operador"
            st.session_state.initialized = True
    
    @staticmethod
    def log_action(action):
        """Registra a√ß√£o no hist√≥rico"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        entry = f"[{timestamp}] {st.session_state.user}: {action}"
        st.session_state.history.insert(0, entry)
    
    @staticmethod
    def load_image(uploaded_file):
        """Carrega e normaliza imagem para 512x512px"""
        try:
            # Verificar tamanho do arquivo
            file_size_mb = uploaded_file.size / (1024 * 1024)
            if file_size_mb > ImageProcessingSystem.MAX_FILE_SIZE_MB:
                st.error(f"‚ùå Arquivo muito grande ({file_size_mb:.2f} MB). M√°ximo: {ImageProcessingSystem.MAX_FILE_SIZE_MB} MB")
                return False
            
            # Ler imagem
            file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
            img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
            
            if img is None:
                st.error("‚ùå N√£o foi poss√≠vel carregar a imagem. Verifique a integridade do arquivo.")
                return False
            
            # Converter BGR para RGB
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            
            # Salvar original
            st.session_state.original_image = img.copy()
            
            # Normalizar para 512x512
            st.session_state.normalized_image = cv2.resize(img, (512, 512), interpolation=cv2.INTER_LANCZOS4)
            st.session_state.processed_image = st.session_state.normalized_image.copy()
            st.session_state.preview_image = st.session_state.normalized_image.copy()
            
            ImageProcessingSystem.log_action(f"Imagem '{uploaded_file.name}' carregada ({file_size_mb:.2f} MB) e normalizada para 512x512px")
            st.success(f"‚úÖ Imagem carregada com sucesso! ({file_size_mb:.2f} MB)")
            
            return True
            
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar imagem: {str(e)}")
            return False
    
    @staticmethod
    def apply_preprocessing(filter_type, kernel_radius, sigma):
        """Aplica filtros de pr√©-processamento"""
        try:
            if st.session_state.processed_image is None:
                st.warning("‚ö†Ô∏è Carregue uma imagem primeiro!")
                return False
            
            # Validar par√¢metros
            if sigma < 0.5 or sigma > 2.0:
                st.error("‚ùå Sigma deve estar entre 0.5 e 2.0")
                return False
            
            if kernel_radius % 2 == 0:
                kernel_radius += 1  # Garantir que seja √≠mpar
            
            img = st.session_state.processed_image.copy()
            
            if filter_type == 'Gaussiano':
                # Aplicar filtro gaussiano
                filtered = np.zeros_like(img, dtype=np.float64)
                for i in range(3):
                    filtered[:,:,i] = gaussian(img[:,:,i], sigma=sigma, preserve_range=True)
                filtered = np.clip(filtered, 0, 255).astype(np.uint8)
                
            elif filter_type == 'Mediana':
                # Aplicar filtro de mediana
                filtered = cv2.medianBlur(img, kernel_radius)
            
            st.session_state.preview_image = filtered
            ImageProcessingSystem.log_action(f"Pr√©-processamento aplicado: {filter_type}, raio={kernel_radius}, sigma={sigma}")
            return True
                
        except Exception as e:
            st.error(f"‚ùå Erro no pr√©-processamento: {str(e)}")
            return False
    
    @staticmethod
    def apply_sharpening(method, weight, threshold, intensity):
        """Aplica m√©todos de realce de nitidez"""
        try:
            if st.session_state.processed_image is None:
                st.warning("‚ö†Ô∏è Carregue uma imagem primeiro!")
                return False
            
            img = st.session_state.processed_image.copy()
            gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
            
            if method == 'Laplaciano':
                # Filtro Laplaciano com m√°scara 3x3 (CORRIGIDO)
                laplacian = cv2.Laplacian(gray, cv2.CV_64F, ksize=3)
                laplacian = np.uint8(np.absolute(laplacian))
                
                # Aplicar em cada canal
                sharpened = np.zeros_like(img)
                for i in range(3):
                    sharpened[:,:,i] = cv2.addWeighted(img[:,:,i], 1.0, laplacian, weight, 0)
                
            elif method == 'Sobel':
                # Filtro Sobel
                sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
                sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
                sobel = np.sqrt(sobelx**2 + sobely**2)
                sobel = np.uint8(sobel)
                
                # Aplicar limiar
                _, sobel = cv2.threshold(sobel, threshold, 255, cv2.THRESH_BINARY)
                
                # Aplicar em cada canal
                sharpened = np.zeros_like(img)
                for i in range(3):
                    sharpened[:,:,i] = cv2.addWeighted(img[:,:,i], 1.0, sobel, weight, 0)
                
            elif method == 'Alta Frequ√™ncia':
                # Filtro de alta frequ√™ncia
                blurred = cv2.GaussianBlur(img, (0, 0), 3)
                sharpened = cv2.addWeighted(img, intensity, blurred, -(intensity-1), 0)
            
            st.session_state.preview_image = np.clip(sharpened, 0, 255).astype(np.uint8)
            ImageProcessingSystem.log_action(f"Nitidez aplicada: {method}, peso={weight}")
            return True
                
        except Exception as e:
            st.error(f"‚ùå Erro ao aplicar nitidez: {str(e)}")
            return False
    
    @staticmethod
    def apply_contrast_enhancement(method, clip_limit, tile_size):
        """Aplica realce de contraste"""
        try:
            if st.session_state.processed_image is None:
                st.warning("‚ö†Ô∏è Carregue uma imagem primeiro!")
                return False
            
            # Validar par√¢metros
            if clip_limit < 2.0 or clip_limit > 3.0:
                st.error("‚ùå Clip limit deve estar entre 2.0 e 3.0")
                return False
            
            img = st.session_state.processed_image.copy()
            
            if method == 'CLAHE (Local)':
                # CLAHE
                lab = cv2.cvtColor(img, cv2.COLOR_RGB2LAB)
                l, a, b = cv2.split(lab)
                
                clahe = cv2.createCLAHE(clipLimit=clip_limit, tileGridSize=(tile_size, tile_size))
                l = clahe.apply(l)
                
                lab = cv2.merge([l, a, b])
                enhanced = cv2.cvtColor(lab, cv2.COLOR_LAB2RGB)
                
                # Salvar vers√£o local
                st.session_state.versions['local'] = enhanced.copy()
                
            elif method == 'Equaliza√ß√£o Global':
                # Equaliza√ß√£o de histograma global
                ycrcb = cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb)
                y, cr, cb = cv2.split(ycrcb)
                
                y = cv2.equalizeHist(y)
                
                ycrcb = cv2.merge([y, cr, cb])
                enhanced = cv2.cvtColor(ycrcb, cv2.COLOR_YCrCb2RGB)
                
                # Salvar vers√£o global
                st.session_state.versions['global'] = enhanced.copy()
            
            st.session_state.preview_image = enhanced
            ImageProcessingSystem.log_action(f"Contraste aplicado: {method}, clip_limit={clip_limit}")
            return True
                
        except Exception as e:
            st.error(f"‚ùå Erro ao aplicar contraste: {str(e)}")
            return False
    
    @staticmethod
    def apply_hybrid_processing(sigma, clip_limit, tile_size, sharp_method, weight, intensity):
        """Fun√ß√£o h√≠brida: suaviza√ß√£o + CLAHE + nitidez com guard-rails"""
        try:
            if st.session_state.normalized_image is None:
                st.warning("‚ö†Ô∏è Carregue uma imagem primeiro!")
                return False
            
            img = st.session_state.normalized_image.copy()
            
            # Etapa 1: Suaviza√ß√£o Gaussiana
            smoothed = np.zeros_like(img, dtype=np.float64)
            for i in range(3):
                smoothed[:,:,i] = gaussian(img[:,:,i], sigma=sigma, preserve_range=True)
            smoothed = np.clip(smoothed, 0, 255).astype(np.uint8)
            
            # Etapa 2: CLAHE
            lab = cv2.cvtColor(smoothed, cv2.COLOR_RGB2LAB)
            l, a, b = cv2.split(lab)
            clahe = cv2.createCLAHE(clipLimit=clip_limit, tileGridSize=(tile_size, tile_size))
            l = clahe.apply(l)
            lab = cv2.merge([l, a, b])
            contrasted = cv2.cvtColor(lab, cv2.COLOR_LAB2RGB)
            
            # Etapa 3: Verificar risco de oversharpening
            gray_contrasted = cv2.cvtColor(contrasted, cv2.COLOR_RGB2GRAY)
            edges_before = cv2.Canny(gray_contrasted, 100, 200)
            edge_density_before = np.sum(edges_before > 0) / edges_before.size
            
            # Ajustar peso se necess√°rio
            adjusted_weight = weight
            adjusted_intensity = intensity
            oversharpening_risk = False
            
            if edge_density_before > 0.20:  # Alto conte√∫do de bordas
                adjusted_weight = min(weight, 1.0)
                adjusted_intensity = min(intensity, 1.2)
                oversharpening_risk = True
            
            # Etapa 4: Aplicar nitidez
            gray = cv2.cvtColor(contrasted, cv2.COLOR_RGB2GRAY)
            
            if sharp_method == 'Laplaciano':
                laplacian = cv2.Laplacian(gray, cv2.CV_64F, ksize=3)
                laplacian = np.uint8(np.absolute(laplacian))
                sharpened = np.zeros_like(contrasted)
                for i in range(3):
                    sharpened[:,:,i] = cv2.addWeighted(contrasted[:,:,i], 1.0, laplacian, adjusted_weight, 0)
            
            elif sharp_method == 'Alta Frequ√™ncia':
                blurred = cv2.GaussianBlur(contrasted, (0, 0), 3)
                sharpened = cv2.addWeighted(contrasted, adjusted_intensity, blurred, -(adjusted_intensity-1), 0)
            
            result = np.clip(sharpened, 0, 255).astype(np.uint8)
            
            st.session_state.processed_image = result
            st.session_state.preview_image = result
            
            log_msg = f"Processamento h√≠brido aplicado: œÉ={sigma}, clip={clip_limit}, m√©todo={sharp_method}"
            if oversharpening_risk:
                log_msg += f" [AJUSTADO: peso {weight}‚Üí{adjusted_weight}, risco de oversharpening detectado]"
                st.warning(f"‚ö†Ô∏è Risco de oversharpening detectado! Par√¢metros ajustados automaticamente.")
            
            ImageProcessingSystem.log_action(log_msg)
            st.success("‚úÖ Processamento h√≠brido aplicado com sucesso!")
            return True
            
        except Exception as e:
            st.error(f"‚ùå Erro no processamento h√≠brido: {str(e)}")
            return False
    
    @staticmethod
    def confirm_preview():
        """Confirma a visualiza√ß√£o e aplica ao processamento"""
        if st.session_state.preview_image is not None:
            st.session_state.processed_image = st.session_state.preview_image.copy()
            ImageProcessingSystem.log_action("Preview confirmado e aplicado")
            st.success("‚úÖ Processamento aplicado!")
            return True
        return False
    
    @staticmethod
    def calculate_metrics():
        """Calcula m√©tricas quantitativas com valida√ß√£o completa"""
        try:
            if st.session_state.normalized_image is None or st.session_state.processed_image is None:
                st.warning("‚ö†Ô∏è Carregue e processe uma imagem primeiro!")
                return False
            
            original = st.session_state.normalized_image.astype(np.float64)
            processed = st.session_state.processed_image.astype(np.float64)
            
            # PSNR
            mse = np.mean((original - processed) ** 2)
            if mse == 0:
                psnr = 100
            else:
                psnr = 20 * np.log10(255.0 / np.sqrt(mse))
            
            # SSIM (CORRIGIDO - removido multichannel)
            ssim = metrics.structural_similarity(
                original, processed,
                channel_axis=2,
                data_range=255.0
            )
            
            # LC (Local Contrast)
            gray_processed = cv2.cvtColor(st.session_state.processed_image, cv2.COLOR_RGB2GRAY)
            lc = np.std(gray_processed) / (np.mean(gray_processed) + 1e-10)
            
            # Edge Sharpness
            edges = cv2.Canny(gray_processed, 100, 200)
            edge_sharpness = np.sum(edges > 0) / edges.size
            
            st.session_state.metrics = {
                'PSNR': psnr,
                'SSIM': ssim,
                'LC': lc,
                'Edge_Sharpness': edge_sharpness,
                'psnr_ok': psnr >= ImageProcessingSystem.PSNR_THRESHOLD,
                'ssim_ok': ssim >= ImageProcessingSystem.SSIM_THRESHOLD,
                'lc_ok': lc >= ImageProcessingSystem.LC_MIN_THRESHOLD,
                'edge_ok': ImageProcessingSystem.EDGE_MIN_THRESHOLD <= edge_sharpness <= ImageProcessingSystem.EDGE_MAX_THRESHOLD
            }
            
            ImageProcessingSystem.log_action("M√©tricas calculadas com valida√ß√£o completa")
            st.success("‚úÖ M√©tricas calculadas com sucesso!")
            return True
                
        except Exception as e:
            st.error(f"‚ùå Erro ao calcular m√©tricas: {str(e)}")
            return False
    
    @staticmethod
    def generate_flowchart():
        """Gera diagrama de fluxo do processamento"""
        flowchart_text = """
        FLUXO DE PROCESSAMENTO:
        
        1. AQUISI√á√ÉO
           ‚îî‚îÄ> Upload de imagem (PNG/JPEG, ‚â§10MB)
           ‚îî‚îÄ> Normaliza√ß√£o para 512x512px
        
        2. PR√â-PROCESSAMENTO
           ‚îú‚îÄ> Filtro Gaussiano (œÉ: 0.5-2.0)
           ‚îî‚îÄ> Filtro de Mediana (raio: 1-9)
        
        3. PROCESSAMENTO
           ‚îú‚îÄ> NITIDEZ
           ‚îÇ   ‚îú‚îÄ> Laplaciano 3x3
           ‚îÇ   ‚îú‚îÄ> Sobel
           ‚îÇ   ‚îî‚îÄ> Alta Frequ√™ncia
           ‚îÇ
           ‚îî‚îÄ> CONTRASTE
               ‚îú‚îÄ> CLAHE Local (clip: 2.0-3.0)
               ‚îî‚îÄ> Equaliza√ß√£o Global
        
        4. AVALIA√á√ÉO
           ‚îú‚îÄ> PSNR ‚â• 30 dB
           ‚îú‚îÄ> SSIM ‚â• 0.85
           ‚îú‚îÄ> LC ‚â• 0.12
           ‚îî‚îÄ> Edge: 0.03-0.25
        
        5. DOCUMENTA√á√ÉO
           ‚îî‚îÄ> Relat√≥rio PDF + Hist√≥rico
        """
        return flowchart_text
    
    @staticmethod
    def generate_pdf_report():
        """Gera relat√≥rio em PDF com conclus√µes"""
        try:
            if st.session_state.processed_image is None:
                st.warning("‚ö†Ô∏è Processe uma imagem primeiro!")
                return None
            
            pdf_buffer = io.BytesIO()
            c = canvas.Canvas(pdf_buffer, pagesize=A4)
            width, height = A4
            
            # T√≠tulo
            c.setFont("Helvetica-Bold", 20)
            c.drawString(50, height - 50, "Relat√≥rio de Processamento de Imagens v2.0")
            
            # Data
            c.setFont("Helvetica", 10)
            c.drawString(50, height - 70, f"Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
            c.drawString(50, height - 85, f"Usu√°rio: {st.session_state.user}")
            
            # Linha separadora
            c.line(50, height - 95, width - 50, height - 95)
            
            # Diagrama de fluxo
            c.setFont("Helvetica-Bold", 12)
            c.drawString(50, height - 115, "Fluxo de Processamento:")
            c.setFont("Courier", 7)
            y_pos = height - 135
            for line in ImageProcessingSystem.generate_flowchart().split('\n'):
                if y_pos < 400:
                    break
                c.drawString(50, y_pos, line[:100])
                y_pos -= 10
            
            # Salvar imagens temporariamente
            with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as tmp_orig:
                cv2.imwrite(tmp_orig.name, cv2.cvtColor(st.session_state.normalized_image, cv2.COLOR_RGB2BGR))
                temp_orig_path = tmp_orig.name
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as tmp_proc:
                cv2.imwrite(tmp_proc.name, cv2.cvtColor(st.session_state.processed_image, cv2.COLOR_RGB2BGR))
                temp_proc_path = tmp_proc.name
            
            # Adicionar imagens
            y_position = height - 500
            c.setFont("Helvetica-Bold", 12)
            c.drawString(50, y_position + 20, "Imagem Original:")
            c.drawImage(temp_orig_path, 50, y_position - 180, width=200, height=200)
            
            c.drawString(300, y_position + 20, "Imagem Processada:")
            c.drawImage(temp_proc_path, 300, y_position - 180, width=200, height=200)
            
            # M√©tricas
            y_position -= 220
            c.setFont("Helvetica-Bold", 14)
            c.drawString(50, y_position, "M√©tricas Quantitativas:")
            
            c.setFont("Helvetica", 11)
            y_position -= 25
            
            if st.session_state.metrics:
                m = st.session_state.metrics
                metrics_lines = [
                    f"PSNR: {m['PSNR']:.2f} dB {'‚úì OK' if m['psnr_ok'] else '‚úó ABAIXO'} (Alvo: >= 30 dB)",
                    f"SSIM: {m['SSIM']:.3f} {'‚úì OK' if m['ssim_ok'] else '‚úó ABAIXO'} (Alvo: >= 0.85)",
                    f"LC: {m['LC']:.3f} {'‚úì OK' if m['lc_ok'] else '‚úó ABAIXO'} (Alvo: >= 0.12)",
                    f"Edge: {m['Edge_Sharpness']:.3f} {'‚úì OK' if m['edge_ok'] else '‚úó FORA'} (Alvo: 0.03-0.25)"
                ]
                
                for line in metrics_lines:
                    c.drawString(70, y_position, line)
                    y_position -= 20
                
                # CONCLUS√ïES (NOVO)
                y_position -= 20
                c.setFont("Helvetica-Bold", 14)
                c.drawString(50, y_position, "Conclus√µes:")
                c.setFont("Helvetica", 10)
                y_position -= 20
                
                all_ok = m['psnr_ok'] and m['ssim_ok'] and m['lc_ok'] and m['edge_ok']
                
                if all_ok:
                    c.drawString(70, y_position, "‚úì APROVADO - Todas as m√©tricas dentro dos par√¢metros.")
                    y_position -= 15
                    c.drawString(70, y_position, "A imagem processada atende aos crit√©rios de qualidade.")
                else:
                    c.drawString(70, y_position, "‚úó REPROVADO - Ajustes necess√°rios:")
                    y_position -= 15
                    if not m['psnr_ok']:
                        c.drawString(85, y_position, "‚Ä¢ PSNR baixo: reduzir intensidade de processamento")
                        y_position -= 12
                    if not m['ssim_ok']:
                        c.drawString(85, y_position, "‚Ä¢ SSIM baixo: preservar melhor a estrutura original")
                        y_position -= 12
                    if not m['lc_ok']:
                        c.drawString(85, y_position, "‚Ä¢ LC baixo: aumentar contraste local (CLAHE)")
                        y_position -= 12
                    if not m['edge_ok']:
                        c.drawString(85, y_position, "‚Ä¢ Edge fora da faixa: ajustar nitidez")
                        y_position -= 12
            
            # Nova p√°gina para hist√≥rico
            c.showPage()
            y_position = height - 50
            
            c.setFont("Helvetica-Bold", 14)
            c.drawString(50, y_position, "Hist√≥rico de Processamento:")
            
            c.setFont("Helvetica", 8)
            y_position -= 20
            
            for entry in st.session_state.history[:30]:
                if y_position < 50:
                    c.showPage()
                    y_position = height - 50
                c.drawString(60, y_position, entry[:100])
                y_position -= 12
            
            # Finalizar PDF
            c.save()
            
            # Limpar arquivos tempor√°rios
            os.unlink(temp_orig_path)
            os.unlink(temp_proc_path)
            
            ImageProcessingSystem.log_action("Relat√≥rio PDF gerado com conclus√µes")
            
            pdf_buffer.seek(0)
            return pdf_buffer.getvalue()
                
        except Exception as e:
            st.error(f"‚ùå Erro ao gerar PDF: {str(e)}")
            return None

# ============================================================================
# INTERFACE PRINCIPAL
# ============================================================================

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # Inicializar sistema
    sistema = ImageProcessingSystem()
    
    # Cabe√ßalho
    st.title("üñºÔ∏è Sistema de Processamento de Imagens v2.0")
    st.markdown("### An√°lise e realce avan√ßado com m√©tricas quantitativas")
    
    # Sidebar
    with st.sidebar:
        st.header("üë§ Informa√ß√µes do Usu√°rio")
        st.session_state.user = st.text_input("Nome do Usu√°rio", value=st.session_state.user)
        user_role = st.selectbox("N√≠vel de Acesso", ["Operador", "Administrador"])
        
        st.divider()
        
        st.header("üìä Informa√ß√µes do Sistema")
        st.info(f"""
        **Vers√£o:** 2.0
        
        **Formatos:** PNG, JPEG
        
        **Tamanho:** 512x512px
        
        **Limite:** {ImageProcessingSystem.MAX_FILE_SIZE_MB} MB
        
        **Status:** üü¢ Online
        """)
        
        st.divider()
        
        st.header("üìö Fluxo de Trabalho")
        st.markdown("""
        1. Importar imagem
        2. Pr√©-processar
        3. Aplicar nitidez
        4. Aplicar contraste
        5. Calcular m√©tricas
        6. Gerar relat√≥rio
        """)
        
        st.divider()
        
        st.header("üéØ Crit√©rios de Qualidade")
        st.markdown(f"""
        - **PSNR:** ‚â• {ImageProcessingSystem.PSNR_THRESHOLD} dB
        - **SSIM:** ‚â• {ImageProcessingSystem.SSIM_THRESHOLD}
        - **LC:** ‚â• {ImageProcessingSystem.LC_MIN_THRESHOLD}
        - **Edge:** {ImageProcessingSystem.EDGE_MIN_THRESHOLD}-{ImageProcessingSystem.EDGE_MAX_THRESHOLD}
        """)
    
    # Abas principais
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üì§ Upload", 
        "üîß Processamento", 
        "üìä An√°lise", 
        "üìà M√©tricas", 
        "üìÑ Relat√≥rio",
        "‚ö° H√≠brido"
    ])
    
    # ========================================================================
    # TAB 1: UPLOAD
    # ========================================================================
    with tab1:
        st.header("üì§ Importa√ß√£o de Imagem")
        
        uploaded_file = st.file_uploader(
            f"Escolha uma imagem (PNG ou JPEG, m√°x {ImageProcessingSystem.MAX_FILE_SIZE_MB} MB)",
            type=['png', 'jpg', 'jpeg'],
            help=f"Tamanho m√°ximo: {ImageProcessingSystem.MAX_FILE_SIZE_MB} MB. A imagem ser√° normalizada para 512x512px"
        )
        
        if uploaded_file is not None:
            if st.button("üöÄ Carregar Imagem", type="primary"):
                if ImageProcessingSystem.load_image(uploaded_file):
                    st.balloons()
        
        # Exibir imagem se carregada
        if st.session_state.normalized_image is not None:
            st.subheader("‚úÖ Imagem Carregada")
            col1, col2 = st.columns(2)
            
            with col1:
                st.image(st.session_state.original_image, caption="Imagem Original", use_container_width=True)
                st.caption(f"Tamanho: {st.session_state.original_image.shape[1]}x{st.session_state.original_image.shape[0]}")
            
            with col2:
                st.image(st.session_state.normalized_image, caption="Imagem Normalizada (512x512)", use_container_width=True)
                st.caption("Pronta para processamento")
    
    # ========================================================================
    # TAB 2: PROCESSAMENTO COM VISUALIZA√á√ÉO EM TEMPO REAL
    # ========================================================================
    with tab2:
        if st.session_state.normalized_image is None:
            st.warning("‚ö†Ô∏è Por favor, carregue uma imagem primeiro na aba 'Upload'")
        else:
            st.header("üîß Processamento de Imagem com Preview em Tempo Real")
            
            # Layout: Controles √† esquerda, visualiza√ß√£o √† direita
            col_controls, col_preview = st.columns([1, 1])
            
            with col_controls:
                # Pr√©-processamento
                with st.expander("üîπ 1. Pr√©-processamento", expanded=True):
                    filter_type = st.selectbox(
                        "Tipo de Filtro",
                        ["Gaussiano", "Mediana"],
                        help="Filtro de suaviza√ß√£o"
                    )
                    
                    kernel_radius = st.slider(
                        "Raio do Kernel",
                        min_value=1,
                        max_value=9,
                        value=3,
                        step=2,
                        help="Tamanho do kernel (deve ser √≠mpar)"
                    )
                    
                    sigma = st.slider(
                        "Sigma (0.5-2.0)",
                        min_value=0.5,
                        max_value=2.0,
                        value=1.0,
                        step=0.1,
                        help="Desvio padr√£o para filtro gaussiano"
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("üëÅÔ∏è Preview", key="preview_preproc", use_container_width=True):
                            ImageProcessingSystem.apply_preprocessing(filter_type, kernel_radius, sigma)
                    
                    with col2:
                        if st.button("‚úÖ Aplicar", key="apply_preproc", use_container_width=True):
                            if ImageProcessingSystem.apply_preprocessing(filter_type, kernel_radius, sigma):
                                ImageProcessingSystem.confirm_preview()
                
                # Nitidez
                with st.expander("üîπ 2. Realce de Nitidez"):
                    sharp_method = st.selectbox(
                        "M√©todo",
                        ["Laplaciano", "Sobel", "Alta Frequ√™ncia"],
                        help="M√©todo de realce de nitidez"
                    )
                    
                    weight = st.slider(
                        "Peso",
                        min_value=0.1,
                        max_value=3.0,
                        value=1.0,
                        step=0.1,
                        help="Peso do filtro (valores altos podem causar oversharpening)"
                    )
                    
                    threshold = st.slider(
                        "Limiar (Sobel)",
                        min_value=10,
                        max_value=200,
                        value=50,
                        help="Limiar para detec√ß√£o de bordas"
                    )
                    
                    intensity = st.slider(
                        "Intensidade (‚â§1.5)",
                        min_value=1.0,
                        max_value=1.5,
                        value=1.2,
                        step=0.1,
                        help="Intensidade do realce"
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("üëÅÔ∏è Preview", key="preview_sharp", use_container_width=True):
                            ImageProcessingSystem.apply_sharpening(sharp_method, weight, threshold, intensity)
                    
                    with col2:
                        if st.button("‚úÖ Aplicar", key="apply_sharp", use_container_width=True):
                            if ImageProcessingSystem.apply_sharpening(sharp_method, weight, threshold, intensity):
                                ImageProcessingSystem.confirm_preview()
                
                # Contraste
                with st.expander("üîπ 3. Realce de Contraste"):
                    contrast_method = st.selectbox(
                        "M√©todo",
                        ["CLAHE (Local)", "Equaliza√ß√£o Global"],
                        help="M√©todo de realce de contraste"
                    )
                    
                    clip_limit = st.slider(
                        "Limite de Clipagem (2.0-3.0)",
                        min_value=2.0,
                        max_value=3.0,
                        value=2.5,
                        step=0.1,
                        help="Limite para CLAHE"
                    )
                    
                    tile_size = st.select_slider(
                        "Tamanho do Bloco",
                        options=[4, 8, 16],
                        value=8,
                        help="Tamanho do bloco para CLAHE"
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("üëÅÔ∏è Preview", key="preview_contrast", use_container_width=True):
                            ImageProcessingSystem.apply_contrast_enhancement(contrast_method, clip_limit, tile_size)
                    
                    with col2:
                        if st.button("‚úÖ Aplicar", key="apply_contrast", use_container_width=True):
                            if ImageProcessingSystem.apply_contrast_enhancement(contrast_method, clip_limit, tile_size):
                                ImageProcessingSystem.confirm_preview()
                
                st.divider()
                
                # Bot√£o para calcular m√©tricas
                if st.button("üìä Calcular M√©tricas", type="primary", use_container_width=True):
                    ImageProcessingSystem.calculate_metrics()
            
            with col_preview:
                st.subheader("üì∫ Visualiza√ß√£o em Tempo Real")
                
                # Compara√ß√£o lado a lado
                if st.session_state.preview_image is not None:
                    # Tabs para diferentes visualiza√ß√µes
                    preview_tab1, preview_tab2, preview_tab3 = st.tabs(["Compara√ß√£o", "Preview", "Diferen√ßa"])
                    
                    with preview_tab1:
                        col1, col2 = st.columns(2)
                        with col1:
                            st.image(st.session_state.processed_image, caption="Atual", use_container_width=True)
                        with col2:
                            st.image(st.session_state.preview_image, caption="Preview", use_container_width=True)
                    
                    with preview_tab2:
                        st.image(st.session_state.preview_image, caption="Preview em Tela Cheia", use_container_width=True)
                    
                    with preview_tab3:
                        diff = np.abs(
                            st.session_state.processed_image.astype(np.float32) - 
                            st.session_state.preview_image.astype(np.float32)
                        )
                        st.image(diff.astype(np.uint8), caption="Mapa de Diferen√ßa", use_container_width=True)
                        
                        # Estat√≠sticas da diferen√ßa
                        diff_mean = np.mean(diff)
                        diff_max = np.max(diff)
                        st.caption(f"Diferen√ßa m√©dia: {diff_mean:.2f} | Diferen√ßa m√°xima: {diff_max:.2f}")
                else:
                    st.info("üëÜ Ajuste os par√¢metros acima e clique em 'Preview' para ver o resultado")
                    st.image(st.session_state.processed_image, caption="Imagem Atual", use_container_width=True)
    
    # ========================================================================
    # TAB 3: AN√ÅLISE VISUAL
    # ========================================================================
    with tab3:
        if st.session_state.processed_image is None:
            st.warning("‚ö†Ô∏è Processe uma imagem primeiro na aba 'Processamento'")
        else:
            st.header("üìä An√°lise Visual Comparativa")
            
            # Compara√ß√£o lado a lado
            st.subheader("üîç Compara√ß√£o Original vs Processada")
            col1, col2 = st.columns(2)
            
            with col1:
                st.image(st.session_state.normalized_image, caption="Original", use_container_width=True)
            
            with col2:
                st.image(st.session_state.processed_image, caption="Processada", use_container_width=True)
            
            # Compara√ß√£o Global vs Local (se dispon√≠vel)
            if 'global' in st.session_state.versions and 'local' in st.session_state.versions:
                st.divider()
                st.subheader("üåç Compara√ß√£o Global vs Local")
                col1, col2 = st.columns(2)
                
                with col1:
                    st.image(st.session_state.versions['global'], caption="Equaliza√ß√£o Global", use_container_width=True)
                
                with col2:
                    st.image(st.session_state.versions['local'], caption="CLAHE Local", use_container_width=True)
            
            st.divider()
            
            # An√°lise detalhada
            st.subheader("üìà An√°lise Detalhada")
            
            # Mapa de diferen√ßa
            diff = np.abs(
                st.session_state.normalized_image.astype(np.float32) - 
                st.session_state.processed_image.astype(np.float32)
            )
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.image(diff.astype(np.uint8), caption="Mapa de Diferen√ßa", use_container_width=True)
            
            with col2:
                # Detec√ß√£o de bordas - Original
                gray_orig = cv2.cvtColor(st.session_state.normalized_image, cv2.COLOR_RGB2GRAY)
                edges_orig = cv2.Canny(gray_orig, 100, 200)
                st.image(edges_orig, caption="Bordas - Original", use_container_width=True)
            
            with col3:
                # Detec√ß√£o de bordas - Processada
                gray_proc = cv2.cvtColor(st.session_state.processed_image, cv2.COLOR_RGB2GRAY)
                edges_proc = cv2.Canny(gray_proc, 100, 200)
                st.image(edges_proc, caption="Bordas - Processada", use_container_width=True)
            
            st.divider()
            
            # Histogramas
            st.subheader("üìä Histogramas RGB")
            
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
            
            # Histograma Original
            for i, color in enumerate(['red', 'green', 'blue']):
                hist = cv2.calcHist([st.session_state.normalized_image], [i], None, [256], [0, 256])
                ax1.plot(hist, color=color, alpha=0.7, label=color.upper())
            ax1.set_title('Histograma RGB - Original', fontweight='bold')
            ax1.set_xlim([0, 256])
            ax1.legend()
            ax1.grid(alpha=0.3)
            
            # Histograma Processada
            for i, color in enumerate(['red', 'green', 'blue']):
                hist = cv2.calcHist([st.session_state.processed_image], [i], None, [256], [0, 256])
                ax2.plot(hist, color=color, alpha=0.7, label=color.upper())
            ax2.set_title('Histograma RGB - Processada', fontweight='bold')
            ax2.set_xlim([0, 256])
            ax2.legend()
            ax2.grid(alpha=0.3)
            
            plt.tight_layout()
            st.pyplot(fig)
    
    # ========================================================================
    # TAB 4: M√âTRICAS
    # ========================================================================
    with tab4:
        st.header("üìà M√©tricas Quantitativas")
        
        if not st.session_state.metrics:
            st.info("‚ÑπÔ∏è Calcule as m√©tricas na aba 'Processamento'")
        else:
            # Exibir m√©tricas em cards
            col1, col2, col3, col4 = st.columns(4)
            
            m = st.session_state.metrics
            
            with col1:
                status = "‚úÖ" if m['psnr_ok'] else "‚ö†Ô∏è"
                st.metric(
                    label=f"{status} PSNR",
                    value=f"{m['PSNR']:.2f} dB",
                    help="Peak Signal-to-Noise Ratio"
                )
                st.caption(f"Alvo: ‚â• {ImageProcessingSystem.PSNR_THRESHOLD} dB")
            
            with col2:
                status = "‚úÖ" if m['ssim_ok'] else "‚ö†Ô∏è"
                st.metric(
                    label=f"{status} SSIM",
                    value=f"{m['SSIM']:.3f}",
                    help="Structural Similarity Index"
                )
                st.caption(f"Alvo: ‚â• {ImageProcessingSystem.SSIM_THRESHOLD}")
            
            with col3:
                status = "‚úÖ" if m['lc_ok'] else "‚ö†Ô∏è"
                st.metric(
                    label=f"{status} LC",
                    value=f"{m['LC']:.3f}",
                    help="Local Contrast"
                )
                st.caption(f"Alvo: ‚â• {ImageProcessingSystem.LC_MIN_THRESHOLD}")
            
            with col4:
                status = "‚úÖ" if m['edge_ok'] else "‚ö†Ô∏è"
                st.metric(
                    label=f"{status} Edge",
                    value=f"{m['Edge_Sharpness']:.3f}",
                    help="Edge Sharpness"
                )
                st.caption(f"Alvo: {ImageProcessingSystem.EDGE_MIN_THRESHOLD}-{ImageProcessingSystem.EDGE_MAX_THRESHOLD}")
            
            st.divider()
            
            # Valida√ß√£o
            all_ok = m['psnr_ok'] and m['ssim_ok'] and m['lc_ok'] and m['edge_ok']
            
            if all_ok:
                st.success("‚úÖ Todas as m√©tricas est√£o dentro dos par√¢metros especificados!")
            else:
                st.warning("‚ö†Ô∏è Algumas m√©tricas est√£o fora dos par√¢metros. Veja as recomenda√ß√µes abaixo:")
                
                if not m['psnr_ok']:
                    st.error(f"‚ùå PSNR: {m['PSNR']:.2f} dB < {ImageProcessingSystem.PSNR_THRESHOLD} dB - Reduzir intensidade de processamento")
                if not m['ssim_ok']:
                    st.error(f"‚ùå SSIM: {m['SSIM']:.3f} < {ImageProcessingSystem.SSIM_THRESHOLD} - Preservar melhor a estrutura original")
                if not m['lc_ok']:
                    st.error(f"‚ùå LC: {m['LC']:.3f} < {ImageProcessingSystem.LC_MIN_THRESHOLD} - Aumentar contraste local (CLAHE)")
                if not m['edge_ok']:
                    st.error(f"‚ùå Edge: {m['Edge_Sharpness']:.3f} fora de [{ImageProcessingSystem.EDGE_MIN_THRESHOLD}, {ImageProcessingSystem.EDGE_MAX_THRESHOLD}] - Ajustar nitidez")
            
            st.divider()
            
            # Gr√°fico de m√©tricas
            st.subheader("üìä Visualiza√ß√£o das M√©tricas")
            
            fig, axes = plt.subplots(2, 2, figsize=(12, 10))
            
            # PSNR
            ax1 = axes[0, 0]
            color = 'green' if m['psnr_ok'] else 'orange'
            ax1.bar(['PSNR'], [m['PSNR']], color=color, alpha=0.7)
            ax1.axhline(y=ImageProcessingSystem.PSNR_THRESHOLD, color='red', linestyle='--', label=f'Alvo: {ImageProcessingSystem.PSNR_THRESHOLD} dB')
            ax1.set_ylabel('dB')
            ax1.set_title('PSNR (Peak Signal-to-Noise Ratio)', fontweight='bold')
            ax1.legend()
            ax1.grid(alpha=0.3)
            
            # SSIM
            ax2 = axes[0, 1]
            color = 'green' if m['ssim_ok'] else 'orange'
            ax2.bar(['SSIM'], [m['SSIM']], color=color, alpha=0.7)
            ax2.axhline(y=ImageProcessingSystem.SSIM_THRESHOLD, color='red', linestyle='--', label=f'Alvo: {ImageProcessingSystem.SSIM_THRESHOLD}')
            ax2.set_ylim([0, 1])
            ax2.set_title('SSIM (Structural Similarity Index)', fontweight='bold')
            ax2.legend()
            ax2.grid(alpha=0.3)
            
            # LC
            ax3 = axes[1, 0]
            color = 'green' if m['lc_ok'] else 'orange'
            ax3.bar(['LC'], [m['LC']], color=color, alpha=0.7)
            ax3.axhline(y=ImageProcessingSystem.LC_MIN_THRESHOLD, color='red', linestyle='--', label=f'M√≠nimo: {ImageProcessingSystem.LC_MIN_THRESHOLD}')
            ax3.set_title('LC (Local Contrast)', fontweight='bold')
            ax3.legend()
            ax3.grid(alpha=0.3)
            
            # Edge Sharpness
            ax4 = axes[1, 1]
            color = 'green' if m['edge_ok'] else 'orange'
            ax4.bar(['Edge Sharpness'], [m['Edge_Sharpness']], color=color, alpha=0.7)
            ax4.axhline(y=ImageProcessingSystem.EDGE_MIN_THRESHOLD, color='red', linestyle='--', label=f'M√≠n: {ImageProcessingSystem.EDGE_MIN_THRESHOLD}')
            ax4.axhline(y=ImageProcessingSystem.EDGE_MAX_THRESHOLD, color='red', linestyle='--', label=f'M√°x: {ImageProcessingSystem.EDGE_MAX_THRESHOLD}')
            ax4.set_ylim([0, max(0.3, m['Edge_Sharpness'] * 1.2)])
            ax4.set_title('Edge Sharpness', fontweight='bold')
            ax4.legend()
            ax4.grid(alpha=0.3)
            
            plt.tight_layout()
            st.pyplot(fig)
            
            st.divider()
            
            # Detalhes t√©cnicos
            with st.expander("üìã Detalhes T√©cnicos das M√©tricas"):
                st.markdown(f"""
                ### PSNR (Peak Signal-to-Noise Ratio)
                Mede a raz√£o entre o sinal m√°ximo poss√≠vel e a pot√™ncia do ru√≠do.
                - **Excelente:** > 40 dB
                - **Bom:** 30-40 dB
                - **Aceit√°vel:** 20-30 dB
                - **Alvo do sistema:** ‚â• {ImageProcessingSystem.PSNR_THRESHOLD} dB
                
                ### SSIM (Structural Similarity Index)
                Mede a similaridade estrutural entre duas imagens.
                - **Excelente:** > 0.95
                - **Bom:** 0.85-0.95
                - **Aceit√°vel:** 0.70-0.85
                - **Alvo do sistema:** ‚â• {ImageProcessingSystem.SSIM_THRESHOLD}
                
                ### LC (Local Contrast)
                Mede a varia√ß√£o local de intensidade na imagem.
                Valores mais altos indicam maior contraste local.
                - **Alvo do sistema:** ‚â• {ImageProcessingSystem.LC_MIN_THRESHOLD}
                
                ### Edge Sharpness
                Mede a nitidez das bordas na imagem atrav√©s da densidade de pixels de borda.
                - **Alvo do sistema:** {ImageProcessingSystem.EDGE_MIN_THRESHOLD} - {ImageProcessingSystem.EDGE_MAX_THRESHOLD}
                - Valores muito baixos: bordas pouco definidas
                - Valores muito altos: poss√≠vel oversharpening
                """)
    
    # ========================================================================
    # TAB 5: RELAT√ìRIO
    # ========================================================================
    with tab5:
        st.header("üìÑ Gera√ß√£o de Relat√≥rio")
        
        if st.session_state.processed_image is None:
            st.warning("‚ö†Ô∏è Processe uma imagem primeiro")
        else:
            # Diagrama de fluxo
            st.subheader("üìä Diagrama de Fluxo do Processamento")
            st.code(ImageProcessingSystem.generate_flowchart(), language=None)
            
            st.divider()
            
            st.subheader("üìã Hist√≥rico de Opera√ß√µes")
            
            # Exibir hist√≥rico
            if st.session_state.history:
                for entry in st.session_state.history[:20]:
                    st.text(entry)
            else:
                st.info("Nenhuma opera√ß√£o registrada ainda")
            
            st.divider()
            
            # Bot√µes de a√ß√£o
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üìÑ Gerar Relat√≥rio PDF", type="primary", use_container_width=True):
                    pdf_data = ImageProcessingSystem.generate_pdf_report()
                    if pdf_data:
                        st.download_button(
                            label="‚¨áÔ∏è Download Relat√≥rio PDF",
                            data=pdf_data,
                            file_name=f"relatorio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                            mime="application/pdf",
                            use_container_width=True
                        )
            
            with col2:
                if st.button("üíæ Baixar Imagem Processada", use_container_width=True):
                    img_pil = Image.fromarray(st.session_state.processed_image)
                    buf = io.BytesIO()
                    img_pil.save(buf, format='PNG')
                    buf.seek(0)
                    
                    st.download_button(
                        label="‚¨áÔ∏è Download Imagem PNG",
                        data=buf,
                        file_name=f"imagem_processada_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png",
                        mime="image/png",
                        use_container_width=True
                    )
            
            st.divider()
            
            # Resumo do processamento
            st.subheader("üìä Resumo do Processamento")
            
            if st.session_state.metrics:
                summary_col1, summary_col2 = st.columns(2)
                
                with summary_col1:
                    st.markdown("**Informa√ß√µes da Imagem:**")
                    st.write(f"- Tamanho: 512x512 pixels")
                    st.write(f"- Canais: RGB")
                    st.write(f"- Opera√ß√µes realizadas: {len(st.session_state.history)}")
                
                with summary_col2:
                    st.markdown("**M√©tricas de Qualidade:**")
                    m = st.session_state.metrics
                    st.write(f"- PSNR: {m['PSNR']:.2f} dB {'‚úÖ' if m['psnr_ok'] else '‚ùå'}")
                    st.write(f"- SSIM: {m['SSIM']:.3f} {'‚úÖ' if m['ssim_ok'] else '‚ùå'}")
                    st.write(f"- LC: {m['LC']:.3f} {'‚úÖ' if m['lc_ok'] else '‚ùå'}")
                    st.write(f"- Edge: {m['Edge_Sharpness']:.3f} {'‚úÖ' if m['edge_ok'] else '‚ùå'}")
            
            st.divider()
            
            # Op√ß√µes adicionais
            st.subheader("‚öôÔ∏è Op√ß√µes Adicionais")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üîÑ Resetar Sistema", use_container_width=True):
                    st.session_state.original_image = None
                    st.session_state.processed_image = None
                    st.session_state.normalized_image = None
                    st.session_state.preview_image = None
                    st.session_state.versions = {}
                    st.session_state.history = []
                    st.session_state.metrics = {}
                    st.success("‚úÖ Sistema resetado!")
                    st.rerun()
            
            with col2:
                if st.button("üìã Limpar Hist√≥rico", use_container_width=True):
                    st.session_state.history = []
                    st.success("‚úÖ Hist√≥rico limpo!")
                    st.rerun()
    
    # ========================================================================
    # TAB 6: PROCESSAMENTO H√çBRIDO
    # ========================================================================
    with tab6:
        if st.session_state.normalized_image is None:
            st.warning("‚ö†Ô∏è Por favor, carregue uma imagem primeiro na aba 'Upload'")
        else:
            st.header("‚ö° Processamento H√≠brido")
            st.markdown("""
            O processamento h√≠brido combina suaviza√ß√£o, realce de contraste e nitidez em uma √∫nica opera√ß√£o otimizada,
            com detec√ß√£o autom√°tica de oversharpening e ajuste de par√¢metros.
            """)
            
            col_controls, col_preview = st.columns([1, 1])
            
            with col_controls:
                st.subheader("üéõÔ∏è Par√¢metros do Pipeline")
                
                # Suaviza√ß√£o
                st.markdown("**1. Suaviza√ß√£o Gaussiana**")
                hybrid_sigma = st.slider(
                    "Sigma",
                    min_value=0.5,
                    max_value=2.0,
                    value=1.0,
                    step=0.1,
                    key="hybrid_sigma"
                )
                
                st.divider()
                
                # CLAHE
                st.markdown("**2. CLAHE (Contraste Local)**")
                hybrid_clip = st.slider(
                    "Clip Limit",
                    min_value=2.0,
                    max_value=3.0,
                    value=2.5,
                    step=0.1,
                    key="hybrid_clip"
                )
                
                hybrid_tile = st.select_slider(
                    "Tile Size",
                    options=[4, 8, 16],
                    value=8,
                    key="hybrid_tile"
                )
                
                st.divider()
                
                # Nitidez
                st.markdown("**3. Realce de Nitidez**")
                hybrid_sharp_method = st.selectbox(
                    "M√©todo",
                    ["Laplaciano", "Alta Frequ√™ncia"],
                    key="hybrid_sharp"
                )
                
                hybrid_weight = st.slider(
                    "Peso",
                    min_value=0.1,
                    max_value=3.0,
                    value=1.0,
                    step=0.1,
                    key="hybrid_weight",
                    help="Ser√° ajustado automaticamente se houver risco de oversharpening"
                )
                
                hybrid_intensity = st.slider(
                    "Intensidade",
                    min_value=1.0,
                    max_value=1.5,
                    value=1.2,
                    step=0.1,
                    key="hybrid_intensity"
                )
                
                st.divider()
                
                if st.button("‚ö° Executar Pipeline H√≠brido", type="primary", use_container_width=True):
                    ImageProcessingSystem.apply_hybrid_processing(
                        hybrid_sigma,
                        hybrid_clip,
                        hybrid_tile,
                        hybrid_sharp_method,
                        hybrid_weight,
                        hybrid_intensity
                    )
            
            with col_preview:
                st.subheader("üì∫ Resultado do Processamento H√≠brido")
                
                if st.session_state.processed_image is not None:
                    st.image(st.session_state.processed_image, caption="Resultado Final", use_container_width=True)
                    
                    # Mostrar compara√ß√£o com original
                    with st.expander("üîç Comparar com Original"):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.image(st.session_state.normalized_image, caption="Original", use_container_width=True)
                        with col2:
                            st.image(st.session_state.processed_image, caption="H√≠brido", use_container_width=True)
                else:
                    st.info("üëÜ Configure os par√¢metros e execute o pipeline para ver o resultado")
                
                # Informa√ß√µes sobre o processamento h√≠brido
                with st.expander("‚ÑπÔ∏è Sobre o Processamento H√≠brido"):
                    st.markdown("""
                    ### Como funciona o pipeline h√≠brido?
                    
                    **Etapa 1: Suaviza√ß√£o**
                    - Remove ru√≠do usando filtro Gaussiano
                    - Preserva estruturas importantes
                    
                    **Etapa 2: CLAHE (Contrast Limited Adaptive Histogram Equalization)**
                    - Real√ßa contraste local de forma adaptativa
                    - Evita amplifica√ß√£o excessiva de ru√≠do
                    
                    **Etapa 3: Realce de Nitidez**
                    - Aplica filtros de alta frequ√™ncia
                    - Sistema detecta automaticamente risco de oversharpening
                    - Ajusta par√¢metros se necess√°rio
                    
                    ### Prote√ß√£o Anti-Oversharpening
                    
                    O sistema analisa a densidade de bordas ap√≥s o CLAHE:
                    - Se densidade > 0.20: ajusta peso/intensidade automaticamente
                    - Emite aviso ao usu√°rio
                    - Garante qualidade final das m√©tricas
                    
                    ### Vantagens
                    
                    ‚úÖ Pipeline otimizado (3 opera√ß√µes em 1)
                    ‚úÖ Detec√ß√£o inteligente de oversharpening
                    ‚úÖ Ajuste autom√°tico de par√¢metros
                    ‚úÖ Resultados consistentes e reproduz√≠veis
                    """)
    
    # ========================================================================
    # FOOTER
    # ========================================================================
    st.divider()
    st.markdown("""
    <div style='text-align: center; color: #888; padding: 20px;'>
        <p><strong>Sistema de Processamento de Imagens v2.0</strong></p>
        <p>Desenvolvido com Python, OpenCV, scikit-image e Streamlit</p>
        <p>üìã Laplaciano 3x3 | üìä M√©tricas validadas | ‚ö° Pipeline h√≠brido | üõ°Ô∏è Anti-oversharpening</p>
    </div>
    """, unsafe_allow_html=True)

# ============================================================================
# EXECUTAR APLICA√á√ÉO
# ============================================================================

if __name__ == "__main__":
    main()